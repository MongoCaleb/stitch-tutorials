{"ast":null,"code":"import _slicedToArray from \"/Users/caleb/git/mongocaleb/stitch-tutorials/todo-web-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport { UserPasswordCredential, AnonymousCredential } from \"mongodb-stitch-browser-sdk\";\nimport { app } from \"./stitch.js\"; // Log in a user with the specified email and password\n// Note: The user must already be registered with the Stitch app.\n// See https://docs.mongodb.com/stitch/authentication/userpass/#create-a-new-user-account\n\nexport function loginEmailPasswordUser(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return app.auth.loginWithCredential(new UserPasswordCredential(email, password)).then(function (stitchUser) {\n    console.log(\"Logged in as: \".concat(email));\n    return stitchUser;\n  });\n} // Log in a user anonymously. \n// Note: When the user logs out, all data is lost.\n// See https://docs.mongodb.com/stitch/authentication/anonymous/\n\nexport function loginAnonymous() {\n  return app.auth.loginWithCredential(new AnonymousCredential()).then(function (stitchUser) {\n    console.log(\"Logged in as Anonymous\");\n    return stitchUser;\n  });\n}\nexport function hasLoggedInUser() {\n  return app.auth.isLoggedIn;\n}\nexport function getAllUsers() {\n  // Return a list of all users that are associated with the app\n  return app.auth.listUsers();\n}\nexport function logoutUser(stitchUser) {\n  // Log a user out of the app. Logged out users are still associated with\n  // the app and will appear in the result of app.auth.listUsers()\n  return app.auth.logoutUserWithId(stitchUser.id);\n}\nexport function useStitchAuth() {\n  // We'll store the list of users in state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1]; // Whenever some authentication event happens, we want to update our list of users in state.\n  // We'll use a Stitch auth listener to call our update function whenever any type of auth event\n  // is emitted. We only want to add this listener once (when the component first loads) so we pass\n  // an empty dependency array.\n\n\n  var updateUsers = function updateUsers() {\n    // We'll get a current list of users and update our state with a function\n    var appUsers = getAllUsers();\n    setUsers(appUsers);\n  };\n\n  useEffect(function () {\n    var listener = {\n      onUserAdded: updateUsers,\n      onUserLoggedIn: updateUsers,\n      onActiveUserChanged: updateUsers,\n      onUserLoggedOut: updateUsers,\n      onUserRemoved: updateUsers,\n      onUserLinked: updateUsers,\n      onListenerRegistered: updateUsers\n    };\n    app.auth.addAuthListener(listener); // React hooks can return a \"cleanup\" function that ties up any loose ends before\n    // a component is unmounted. In this case, we want to remove the auth listener\n    // we created to prevent a memory leak.\n\n    return function () {\n      return app.auth.removeAuthListener(listener);\n    };\n  }, []); // We also want a state variable that indicates if ANY user is currently logged in\n\n  var _useState3 = useState(app.auth.isLoggedIn),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasLoggedInUser = _useState4[0],\n      setHasLoggedInUser = _useState4[1];\n\n  var checkForLoggedInUser = function checkForLoggedInUser() {\n    setHasLoggedInUser(app.auth.isLoggedIn);\n  };\n\n  useEffect(checkForLoggedInUser);\n  return {\n    users: users,\n    hasLoggedInUser: hasLoggedInUser\n  };\n}","map":{"version":3,"sources":["/Users/caleb/git/mongocaleb/stitch-tutorials/todo-web-1/src/stitch/authentication.js"],"names":["useState","useEffect","UserPasswordCredential","AnonymousCredential","app","loginEmailPasswordUser","email","password","auth","loginWithCredential","then","stitchUser","console","log","loginAnonymous","hasLoggedInUser","isLoggedIn","getAllUsers","listUsers","logoutUser","logoutUserWithId","id","useStitchAuth","users","setUsers","updateUsers","appUsers","listener","onUserAdded","onUserLoggedIn","onActiveUserChanged","onUserLoggedOut","onUserRemoved","onUserLinked","onListenerRegistered","addAuthListener","removeAuthListener","setHasLoggedInUser","checkForLoggedInUser"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,sBAAT,EAAiCC,mBAAjC,QAA4D,4BAA5D;AACA,SAAQC,GAAR,QAAmB,aAAnB,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,OAAqD;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAC1D,SAAOH,GAAG,CAACI,IAAJ,CACJC,mBADI,CACgB,IAAIP,sBAAJ,CAA2BI,KAA3B,EAAkCC,QAAlC,CADhB,EAEJG,IAFI,CAEC,UAAAC,UAAU,EAAI;AAClBC,IAAAA,OAAO,CAACC,GAAR,yBAA6BP,KAA7B;AACA,WAAOK,UAAP;AACD,GALI,CAAP;AAMD,C,CAED;AACA;AACA;;AACA,OAAO,SAASG,cAAT,GAA0B;AAC/B,SAAOV,GAAG,CAACI,IAAJ,CACJC,mBADI,CACgB,IAAIN,mBAAJ,EADhB,EAEJO,IAFI,CAEC,UAAAC,UAAU,EAAI;AAClBC,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOF,UAAP;AACD,GALI,CAAP;AAMD;AAED,OAAO,SAASI,eAAT,GAA2B;AAChC,SAAOX,GAAG,CAACI,IAAJ,CAASQ,UAAhB;AACD;AAED,OAAO,SAASC,WAAT,GAAuB;AAC5B;AACA,SAAOb,GAAG,CAACI,IAAJ,CAASU,SAAT,EAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBR,UAApB,EAAgC;AACrC;AACA;AACA,SAAOP,GAAG,CAACI,IAAJ,CAASY,gBAAT,CAA0BT,UAAU,CAACU,EAArC,CAAP;AACD;AAED,OAAO,SAASC,aAAT,GAAyB;AAC9B;AAD8B,kBAEJtB,QAAQ,CAAC,EAAD,CAFJ;AAAA;AAAA,MAEvBuB,KAFuB;AAAA,MAEhBC,QAFgB,kBAG9B;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACAO,IAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,GAJD;;AAKAzB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM0B,QAAQ,GAAG;AACfC,MAAAA,WAAW,EAAEH,WADE;AAEfI,MAAAA,cAAc,EAAEJ,WAFD;AAGfK,MAAAA,mBAAmB,EAAEL,WAHN;AAIfM,MAAAA,eAAe,EAAEN,WAJF;AAKfO,MAAAA,aAAa,EAAEP,WALA;AAMfQ,MAAAA,YAAY,EAAER,WANC;AAOfS,MAAAA,oBAAoB,EAAET;AAPP,KAAjB;AASArB,IAAAA,GAAG,CAACI,IAAJ,CAAS2B,eAAT,CAAyBR,QAAzB,EAVc,CAWd;AACA;AACA;;AACA,WAAO;AAAA,aAAMvB,GAAG,CAACI,IAAJ,CAAS4B,kBAAT,CAA4BT,QAA5B,CAAN;AAAA,KAAP;AACD,GAfQ,EAeN,EAfM,CAAT,CAZ8B,CA6B9B;;AA7B8B,mBA8BgB3B,QAAQ,CAACI,GAAG,CAACI,IAAJ,CAASQ,UAAV,CA9BxB;AAAA;AAAA,MA8BvBD,eA9BuB;AAAA,MA8BNsB,kBA9BM;;AA+B9B,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjCD,IAAAA,kBAAkB,CAACjC,GAAG,CAACI,IAAJ,CAASQ,UAAV,CAAlB;AACD,GAFD;;AAGAf,EAAAA,SAAS,CAACqC,oBAAD,CAAT;AAEA,SAAO;AAAEf,IAAAA,KAAK,EAALA,KAAF;AAASR,IAAAA,eAAe,EAAfA;AAAT,GAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { UserPasswordCredential, AnonymousCredential } from \"mongodb-stitch-browser-sdk\";\nimport {app}  from \"./stitch.js\";\n\n// Log in a user with the specified email and password\n// Note: The user must already be registered with the Stitch app.\n// See https://docs.mongodb.com/stitch/authentication/userpass/#create-a-new-user-account\nexport function loginEmailPasswordUser({ email, password }) {\n  return app.auth\n    .loginWithCredential(new UserPasswordCredential(email, password))\n    .then(stitchUser => {\n      console.log(`Logged in as: ${email}`);\n      return stitchUser;\n    });\n}\n\n// Log in a user anonymously. \n// Note: When the user logs out, all data is lost.\n// See https://docs.mongodb.com/stitch/authentication/anonymous/\nexport function loginAnonymous() {\n  return app.auth\n    .loginWithCredential(new AnonymousCredential())\n    .then(stitchUser => {\n      console.log(`Logged in as Anonymous`);\n      return stitchUser;\n    });\n}\n\nexport function hasLoggedInUser() {\n  return app.auth.isLoggedIn;\n}\n\nexport function getAllUsers() {\n  // Return a list of all users that are associated with the app\n  return app.auth.listUsers();\n}\n\nexport function logoutUser(stitchUser) {\n  // Log a user out of the app. Logged out users are still associated with\n  // the app and will appear in the result of app.auth.listUsers()\n  return app.auth.logoutUserWithId(stitchUser.id);\n}\n\nexport function useStitchAuth() {\n  // We'll store the list of users in state\n  const [users, setUsers] = useState([]);\n  // Whenever some authentication event happens, we want to update our list of users in state.\n  // We'll use a Stitch auth listener to call our update function whenever any type of auth event\n  // is emitted. We only want to add this listener once (when the component first loads) so we pass\n  // an empty dependency array.\n  const updateUsers = () => {\n    // We'll get a current list of users and update our state with a function\n    const appUsers = getAllUsers();\n    setUsers(appUsers);\n  };\n  useEffect(() => {\n    const listener = {\n      onUserAdded: updateUsers,\n      onUserLoggedIn: updateUsers,\n      onActiveUserChanged: updateUsers,\n      onUserLoggedOut: updateUsers,\n      onUserRemoved: updateUsers,\n      onUserLinked: updateUsers,\n      onListenerRegistered: updateUsers,\n    };\n    app.auth.addAuthListener(listener);\n    // React hooks can return a \"cleanup\" function that ties up any loose ends before\n    // a component is unmounted. In this case, we want to remove the auth listener\n    // we created to prevent a memory leak.\n    return () => app.auth.removeAuthListener(listener);\n  }, []);\n\n  // We also want a state variable that indicates if ANY user is currently logged in\n  const [hasLoggedInUser, setHasLoggedInUser] = useState(app.auth.isLoggedIn);\n  const checkForLoggedInUser = () => {\n    setHasLoggedInUser(app.auth.isLoggedIn);\n  };\n  useEffect(checkForLoggedInUser);\n\n  return { users, hasLoggedInUser };\n}\n"]},"metadata":{},"sourceType":"module"}